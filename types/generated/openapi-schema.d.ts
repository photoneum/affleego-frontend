/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Takes a set of user credentials and returns an access and refresh JSON web
     *     token pair to prove the authentication of those credentials. */
    post: operations["auth_login_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/onboarding": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Onboarding
     * @description Complete user onboarding process
     */
    post: operations["auth_onboarding_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/password-reset": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Request Password Reset
     * @description Request password reset email
     */
    post: operations["auth_password_reset_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/password-reset/confirm": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset Password
     * @description Reset password with new password
     */
    post: operations["auth_password_reset_confirm_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Registration
     * @description Register a new user account
     */
    post: operations["auth_register_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/resend-verification-code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Resend Verification Code
     * @description Resend verification code
     */
    post: operations["auth_resend_verification_code_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Verify User Email
     * @description Verify user email with verification code
     */
    post: operations["auth_verify_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/deals": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Deals
     * @description List all available deals
     */
    get: operations["deals_list"];
    put?: never;
    /** @description ViewSet for managing deals. */
    post: operations["deals_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/deals/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Deal
     * @description Get detailed information about a specific deal
     */
    get: operations["deals_retrieve"];
    /** @description ViewSet for managing deals. */
    put: operations["deals_update"];
    post?: never;
    /** @description ViewSet for managing deals. */
    delete: operations["deals_destroy"];
    options?: never;
    head?: never;
    /** @description ViewSet for managing deals. */
    patch: operations["deals_partial_update"];
    trace?: never;
  };
  "/api/v1/deals/featured": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Featured Deals
     * @description List featured deals
     */
    get: operations["deals_featured_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CustomTokenObtainPairRequest: {
      email: string;
      password: string;
    };
    /** @description Serializer for detailed Deal representation. */
    DealDetailResponse: {
      /** Format: uuid */
      readonly uuid: string;
      name: string;
      /** @description The requirements for the deal */
      requirements?: string;
      /** @description The commission type for the deal */
      commission_type?: string;
      /** @description The projected payout for the deal */
      projected_payout?: string;
      /** @description The revenue share for the deal */
      revenue_share?: string;
      /** @description The payout schedule for the deal */
      payout_schedule?: string;
      status?: components["schemas"]["StatusEnum"];
      is_featured?: boolean;
      /** Format: uri */
      referral_link: string;
      description?: string;
      /** @description Convert comma-separated keywords to a list. */
      readonly keywords: string[];
    };
    /** @description Serializer for detailed Deal representation. */
    DealDetailResponseRequest: {
      name: string;
      /** @description The requirements for the deal */
      requirements?: string;
      /** @description The commission type for the deal */
      commission_type?: string;
      /** @description The projected payout for the deal */
      projected_payout?: string;
      /** @description The revenue share for the deal */
      revenue_share?: string;
      /** @description The payout schedule for the deal */
      payout_schedule?: string;
      status?: components["schemas"]["StatusEnum"];
      is_featured?: boolean;
      /** Format: uri */
      referral_link: string;
      description?: string;
    };
    PasswordResetConfirmRequest: {
      /** Format: email */
      email: string;
      code: string;
      password: string;
    };
    PasswordResetRequestRequest: {
      /** Format: email */
      email: string;
    };
    /** @description Serializer for detailed Deal representation. */
    PatchedDealDetailResponseRequest: {
      name?: string;
      /** @description The requirements for the deal */
      requirements?: string;
      /** @description The commission type for the deal */
      commission_type?: string;
      /** @description The projected payout for the deal */
      projected_payout?: string;
      /** @description The revenue share for the deal */
      revenue_share?: string;
      /** @description The payout schedule for the deal */
      payout_schedule?: string;
      status?: components["schemas"]["StatusEnum"];
      is_featured?: boolean;
      /** Format: uri */
      referral_link?: string;
      description?: string;
    };
    ResendVerificationCodeRequest: {
      /** Format: email */
      email: string;
    };
    /**
     * @description * `open` - Open
     *     * `closed` - Closed
     * @enum {string}
     */
    StatusEnum: "open" | "closed";
    UserOnboarding: {
      brand_name: string;
      /** Format: uri */
      website?: string;
      /** @description List of marketing methods used by the user */
      marketing_methods?: string;
      heard_from: string;
      feedback_message?: string;
    };
    UserOnboardingRequest: {
      /** Format: email */
      user_email: string;
      brand_name: string;
      /** Format: uri */
      website?: string;
      /** @description List of marketing methods used by the user */
      marketing_methods?: string;
      heard_from: string;
      feedback_message?: string;
    };
    UserRegistration: {
      /**
       * Email address
       * Format: email
       */
      email: string;
      first_name: string;
      last_name: string;
      phone_number?: string;
    };
    UserRegistrationRequest: {
      /**
       * Email address
       * Format: email
       */
      email: string;
      password: string;
      first_name: string;
      last_name: string;
      phone_number?: string;
    };
    /** @description Serializer for email verification. */
    VerificationRequest: {
      /** Format: email */
      email: string;
      code: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  auth_login_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomTokenObtainPairRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomTokenObtainPairRequest"];
        "multipart/form-data": components["schemas"]["CustomTokenObtainPairRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  auth_onboarding_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserOnboardingRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UserOnboardingRequest"];
        "multipart/form-data": components["schemas"]["UserOnboardingRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserOnboarding"];
        };
      };
    };
  };
  auth_password_reset_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetRequestRequest"];
        "multipart/form-data": components["schemas"]["PasswordResetRequestRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  auth_password_reset_confirm_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirmRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirmRequest"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirmRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  auth_register_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegistrationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UserRegistrationRequest"];
        "multipart/form-data": components["schemas"]["UserRegistrationRequest"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserRegistration"];
        };
      };
    };
  };
  auth_resend_verification_code_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResendVerificationCodeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ResendVerificationCodeRequest"];
        "multipart/form-data": components["schemas"]["ResendVerificationCodeRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  auth_verify_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerificationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["VerificationRequest"];
        "multipart/form-data": components["schemas"]["VerificationRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deals_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"][];
        };
      };
    };
  };
  deals_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealDetailResponseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DealDetailResponseRequest"];
        "multipart/form-data": components["schemas"]["DealDetailResponseRequest"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"];
        };
      };
    };
  };
  deals_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Deal. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"];
        };
      };
    };
  };
  deals_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Deal. */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealDetailResponseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DealDetailResponseRequest"];
        "multipart/form-data": components["schemas"]["DealDetailResponseRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"];
        };
      };
    };
  };
  deals_destroy: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Deal. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deals_partial_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description A unique integer value identifying this Deal. */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedDealDetailResponseRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDealDetailResponseRequest"];
        "multipart/form-data": components["schemas"]["PatchedDealDetailResponseRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"];
        };
      };
    };
  };
  deals_featured_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DealDetailResponse"][];
        };
      };
    };
  };
}
